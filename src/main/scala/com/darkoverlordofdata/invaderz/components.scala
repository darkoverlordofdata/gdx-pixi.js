package com.darkoverlordofdata.invaderz 
/**
 * Entitas Generated Components and Extensions for com.darkoverlordofdata.invaderz
 *
 * do not edit this file
 */

import scala.collection.mutable.ListBuffer
import com.darkoverlordofdata.entitas.{Entity, Matcher, IMatcher, IComponent}
import co.technius.scalajs.pixi.Sprite
/**
 * Components
 */
object Component extends Enumeration {
    type Component = Value
    var
    Alien,
    Bounds,
    Bullet,
    Destroy,
    Player,
    Position,
    Velocity,
    View,
    TotalComponents = Value
}

case class AlienComponent(var active:Boolean=true) extends IComponent 
case class BoundsComponent(var width:Float = 0f,var height:Float = 0f) extends IComponent 
case class BulletComponent(var active:Boolean=true) extends IComponent 
case class DestroyComponent(var active:Boolean=true) extends IComponent 
case class PlayerComponent(var active:Boolean=true) extends IComponent 
case class PositionComponent(var x:Float = 0f,var y:Float = 0f) extends IComponent 
case class VelocityComponent(var x:Float = 0f,var y:Float = 0f) extends IComponent 
case class ViewComponent(var sprite:co.technius.scalajs.pixi.Sprite = null) extends IComponent 

/**
 * Matcher extensions
 */
object Match {

    val Alien:IMatcher = Matcher.allOf(Array(Component.Alien.id)) 
    val Bounds:IMatcher = Matcher.allOf(Array(Component.Bounds.id)) 
    val Bullet:IMatcher = Matcher.allOf(Array(Component.Bullet.id)) 
    val Destroy:IMatcher = Matcher.allOf(Array(Component.Destroy.id)) 
    val Player:IMatcher = Matcher.allOf(Array(Component.Player.id)) 
    val Position:IMatcher = Matcher.allOf(Array(Component.Position.id)) 
    val Velocity:IMatcher = Matcher.allOf(Array(Component.Velocity.id)) 
    val View:IMatcher = Matcher.allOf(Array(Component.View.id)) 
}

/**
 * Entity extensions
 */
object EntityExtensions {

    private val alienComponent =  new AlienComponent()
    private val boundsComponentPool = new ListBuffer[BoundsComponent]()
    private val bulletComponent =  new BulletComponent()
    private val destroyComponent =  new DestroyComponent()
    private val playerComponent =  new PlayerComponent()
    private val positionComponentPool = new ListBuffer[PositionComponent]()
    private val velocityComponentPool = new ListBuffer[VelocityComponent]()
    private val viewComponentPool = new ListBuffer[ViewComponent]()

    implicit class ExtendEntity(val entity:Entity) {


        /** Entity: Alien methods*/
        def isAlien:Boolean = entity.hasComponent(Component.Alien.id)

        def setAlien(value:Boolean):Entity = {
            if (value != isAlien)
                entity.addComponent(Component.Alien.id, alienComponent)
            else
                entity.removeComponent(Component.Alien.id)
            entity
        }

        /** Entity: Bounds methods*/
        def bounds:BoundsComponent = entity.getComponent(Component.Bounds.id).asInstanceOf[BoundsComponent]

        def hasBounds:Boolean = entity.hasComponent(Component.Bounds.id)

        def clearBoundsComponentPool() = {
            boundsComponentPool.clear()
        }

        def addBounds(width:Float, height:Float):Entity = {
            val component:BoundsComponent = 
                if (boundsComponentPool.nonEmpty) 
                    boundsComponentPool.last.copy(width = width, height = height)
                else new BoundsComponent(width = width, height = height)
            
            entity.addComponent(Component.Bounds.id, component)
            entity
        }

        def replaceBounds(width:Float, height:Float):Entity = {
            val previousComponent = if (hasBounds) bounds else null
            val component:BoundsComponent = 
                if (boundsComponentPool.nonEmpty) 
                    boundsComponentPool.last.copy(width = width, height = height)
                else new BoundsComponent(width = width, height = height)
            entity.replaceComponent(Component.Bounds.id, component)
            if (previousComponent != null)
                boundsComponentPool += previousComponent
            entity
        }

        def removeBounds():Entity = {
            val component = bounds
            entity.removeComponent(Component.Bounds.id)
            boundsComponentPool += component
            entity
        }
        
        def updateBounds(component: BoundsComponent) = {
            entity.updateComponent(Component.Bounds.id, component)
        }
        /** Entity: Bullet methods*/
        def isBullet:Boolean = entity.hasComponent(Component.Bullet.id)

        def setBullet(value:Boolean):Entity = {
            if (value != isBullet)
                entity.addComponent(Component.Bullet.id, bulletComponent)
            else
                entity.removeComponent(Component.Bullet.id)
            entity
        }

        /** Entity: Destroy methods*/
        def isDestroy:Boolean = entity.hasComponent(Component.Destroy.id)

        def setDestroy(value:Boolean):Entity = {
            if (value != isDestroy)
                entity.addComponent(Component.Destroy.id, destroyComponent)
            else
                entity.removeComponent(Component.Destroy.id)
            entity
        }

        /** Entity: Player methods*/
        def isPlayer:Boolean = entity.hasComponent(Component.Player.id)

        def setPlayer(value:Boolean):Entity = {
            if (value != isPlayer)
                entity.addComponent(Component.Player.id, playerComponent)
            else
                entity.removeComponent(Component.Player.id)
            entity
        }

        /** Entity: Position methods*/
        def position:PositionComponent = entity.getComponent(Component.Position.id).asInstanceOf[PositionComponent]

        def hasPosition:Boolean = entity.hasComponent(Component.Position.id)

        def clearPositionComponentPool() = {
            positionComponentPool.clear()
        }

        def addPosition(x:Float, y:Float):Entity = {
            val component:PositionComponent = 
                if (positionComponentPool.nonEmpty) 
                    positionComponentPool.last.copy(x = x, y = y)
                else new PositionComponent(x = x, y = y)
            
            entity.addComponent(Component.Position.id, component)
            entity
        }

        def replacePosition(x:Float, y:Float):Entity = {
            val previousComponent = if (hasPosition) position else null
            val component:PositionComponent = 
                if (positionComponentPool.nonEmpty) 
                    positionComponentPool.last.copy(x = x, y = y)
                else new PositionComponent(x = x, y = y)
            entity.replaceComponent(Component.Position.id, component)
            if (previousComponent != null)
                positionComponentPool += previousComponent
            entity
        }

        def removePosition():Entity = {
            val component = position
            entity.removeComponent(Component.Position.id)
            positionComponentPool += component
            entity
        }
        
        def updatePosition(component: PositionComponent) = {
            entity.updateComponent(Component.Position.id, component)
        }
        /** Entity: Velocity methods*/
        def velocity:VelocityComponent = entity.getComponent(Component.Velocity.id).asInstanceOf[VelocityComponent]

        def hasVelocity:Boolean = entity.hasComponent(Component.Velocity.id)

        def clearVelocityComponentPool() = {
            velocityComponentPool.clear()
        }

        def addVelocity(x:Float, y:Float):Entity = {
            val component:VelocityComponent = 
                if (velocityComponentPool.nonEmpty) 
                    velocityComponentPool.last.copy(x = x, y = y)
                else new VelocityComponent(x = x, y = y)
            
            entity.addComponent(Component.Velocity.id, component)
            entity
        }

        def replaceVelocity(x:Float, y:Float):Entity = {
            val previousComponent = if (hasVelocity) velocity else null
            val component:VelocityComponent = 
                if (velocityComponentPool.nonEmpty) 
                    velocityComponentPool.last.copy(x = x, y = y)
                else new VelocityComponent(x = x, y = y)
            entity.replaceComponent(Component.Velocity.id, component)
            if (previousComponent != null)
                velocityComponentPool += previousComponent
            entity
        }

        def removeVelocity():Entity = {
            val component = velocity
            entity.removeComponent(Component.Velocity.id)
            velocityComponentPool += component
            entity
        }
        
        def updateVelocity(component: VelocityComponent) = {
            entity.updateComponent(Component.Velocity.id, component)
        }
        /** Entity: View methods*/
        def view:ViewComponent = entity.getComponent(Component.View.id).asInstanceOf[ViewComponent]

        def hasView:Boolean = entity.hasComponent(Component.View.id)

        def clearViewComponentPool() = {
            viewComponentPool.clear()
        }

        def addView(sprite:co.technius.scalajs.pixi.Sprite):Entity = {
            val component:ViewComponent = 
                if (viewComponentPool.nonEmpty) 
                    viewComponentPool.last.copy(sprite = sprite)
                else new ViewComponent(sprite = sprite)
            
            entity.addComponent(Component.View.id, component)
            entity
        }

        def replaceView(sprite:co.technius.scalajs.pixi.Sprite):Entity = {
            val previousComponent = if (hasView) view else null
            val component:ViewComponent = 
                if (viewComponentPool.nonEmpty) 
                    viewComponentPool.last.copy(sprite = sprite)
                else new ViewComponent(sprite = sprite)
            entity.replaceComponent(Component.View.id, component)
            if (previousComponent != null)
                viewComponentPool += previousComponent
            entity
        }

        def removeView():Entity = {
            val component = view
            entity.removeComponent(Component.View.id)
            viewComponentPool += component
            entity
        }
        
        def updateView(component: ViewComponent) = {
            entity.updateComponent(Component.View.id, component)
        }
    }
}