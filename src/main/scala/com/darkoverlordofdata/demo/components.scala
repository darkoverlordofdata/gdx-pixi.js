package com.darkoverlordofdata.demo 
/**
 * Entitas Generated Components and Extensions for com.darkoverlordofdata.demo
 *
 * do not edit this file
 */

import scala.collection.mutable.ListBuffer
import com.darkoverlordofdata.entitas.{Entity, Matcher, IMatcher, IComponent}
import com.badlogic.gdx.graphics.g2d.Sprite
/**
 * Components
 */
object Component extends Enumeration {
    type Component = Value
    var
    Bounds,
    Bullet,
    Destroy,
    Enemy,
    Expires,
    Firing,
    Health,
    Layer,
    Player,
    Position,
    Resource,
    Scale,
    Score,
    SoundEffect,
    Tint,
    Tween,
    Velocity,
    View,
    TotalComponents = Value
}

case class BoundsComponent( radius:Float = 0f) extends IComponent 
case class BulletComponent( active:Boolean=true) extends IComponent 
case class DestroyComponent( active:Boolean=true) extends IComponent 
case class EnemyComponent( active:Boolean=true) extends IComponent 
case class ExpiresComponent( delay:Float = 0f) extends IComponent 
case class FiringComponent( active:Boolean=true) extends IComponent 
case class HealthComponent( currentHealth:Float = 0f, maximumHealth:Float = 0f) extends IComponent 
case class LayerComponent( ordinal:Int = 0) extends IComponent 
case class PlayerComponent( active:Boolean=true) extends IComponent 
case class PositionComponent( x:Float = 0f, y:Float = 0f) extends IComponent 
case class ResourceComponent( name:String = "") extends IComponent 
case class ScaleComponent( x:Float = 0f, y:Float = 0f) extends IComponent 
case class ScoreComponent( value:Int = 0) extends IComponent 
case class SoundEffectComponent( effect:Int = 0) extends IComponent 
case class TintComponent( r:Float = 0f, g:Float = 0f, b:Float = 0f, a:Float = 0f) extends IComponent 
case class TweenComponent( min:Float = 0f, max:Float = 0f, speed:Float = 0f, repeat:Boolean = false, active:Boolean = false) extends IComponent 
case class VelocityComponent( x:Float = 0f, y:Float = 0f) extends IComponent 
case class ViewComponent( sprite:com.badlogic.gdx.graphics.g2d.Sprite = null) extends IComponent 

/**
 * Matcher extensions
 */
object Match {

    val Bounds:IMatcher = Matcher.allOf(Array(Component.Bounds.id)) 
    val Bullet:IMatcher = Matcher.allOf(Array(Component.Bullet.id)) 
    val Destroy:IMatcher = Matcher.allOf(Array(Component.Destroy.id)) 
    val Enemy:IMatcher = Matcher.allOf(Array(Component.Enemy.id)) 
    val Expires:IMatcher = Matcher.allOf(Array(Component.Expires.id)) 
    val Firing:IMatcher = Matcher.allOf(Array(Component.Firing.id)) 
    val Health:IMatcher = Matcher.allOf(Array(Component.Health.id)) 
    val Layer:IMatcher = Matcher.allOf(Array(Component.Layer.id)) 
    val Player:IMatcher = Matcher.allOf(Array(Component.Player.id)) 
    val Position:IMatcher = Matcher.allOf(Array(Component.Position.id)) 
    val Resource:IMatcher = Matcher.allOf(Array(Component.Resource.id)) 
    val Scale:IMatcher = Matcher.allOf(Array(Component.Scale.id)) 
    val Score:IMatcher = Matcher.allOf(Array(Component.Score.id)) 
    val SoundEffect:IMatcher = Matcher.allOf(Array(Component.SoundEffect.id)) 
    val Tint:IMatcher = Matcher.allOf(Array(Component.Tint.id)) 
    val Tween:IMatcher = Matcher.allOf(Array(Component.Tween.id)) 
    val Velocity:IMatcher = Matcher.allOf(Array(Component.Velocity.id)) 
    val View:IMatcher = Matcher.allOf(Array(Component.View.id)) 
}

/**
 * Entity extensions
 */
object EntityExtensions {

    private val boundsComponentPool = new ListBuffer[BoundsComponent]()
    private val bulletComponent =  new BulletComponent()
    private val destroyComponent =  new DestroyComponent()
    private val enemyComponent =  new EnemyComponent()
    private val expiresComponentPool = new ListBuffer[ExpiresComponent]()
    private val firingComponent =  new FiringComponent()
    private val healthComponentPool = new ListBuffer[HealthComponent]()
    private val layerComponentPool = new ListBuffer[LayerComponent]()
    private val playerComponent =  new PlayerComponent()
    private val positionComponentPool = new ListBuffer[PositionComponent]()
    private val resourceComponentPool = new ListBuffer[ResourceComponent]()
    private val scaleComponentPool = new ListBuffer[ScaleComponent]()
    private val scoreComponentPool = new ListBuffer[ScoreComponent]()
    private val soundEffectComponentPool = new ListBuffer[SoundEffectComponent]()
    private val tintComponentPool = new ListBuffer[TintComponent]()
    private val tweenComponentPool = new ListBuffer[TweenComponent]()
    private val velocityComponentPool = new ListBuffer[VelocityComponent]()
    private val viewComponentPool = new ListBuffer[ViewComponent]()

    implicit class ExtendEntity(val entity:Entity) {


        /** Entity: Bounds methods*/
        def bounds:BoundsComponent = entity.getComponent(Component.Bounds.id).asInstanceOf[BoundsComponent]

        def hasBounds:Boolean = entity.hasComponent(Component.Bounds.id)

        def clearBoundsComponentPool() = {
            boundsComponentPool.clear()
        }

        def addBounds(radius:Float):Entity = {
            val component:BoundsComponent = 
                if (boundsComponentPool.nonEmpty) 
                    boundsComponentPool.last.copy(radius = radius)
                else new BoundsComponent(radius = radius)
            
            entity.addComponent(Component.Bounds.id, component)
            entity
        }

        def replaceBounds(radius:Float):Entity = {
            val previousComponent = if (hasBounds) bounds else null
            val component:BoundsComponent = 
                if (boundsComponentPool.nonEmpty) 
                    boundsComponentPool.last.copy(radius = radius)
                else new BoundsComponent(radius = radius)
            entity.replaceComponent(Component.Bounds.id, component)
            if (previousComponent != null)
                boundsComponentPool += previousComponent
            entity
        }

        def removeBounds():Entity = {
            val component = bounds
            entity.removeComponent(Component.Bounds.id)
            boundsComponentPool += component
            entity
        }
        
        def updateBounds(component: BoundsComponent) = {
            entity.updateComponent(Component.Bounds.id, component)
        }
        /** Entity: Bullet methods*/
        def isBullet:Boolean = entity.hasComponent(Component.Bullet.id)

        def setBullet(value:Boolean):Entity = {
            if (value != isBullet)
                entity.addComponent(Component.Bullet.id, bulletComponent)
            else
                entity.removeComponent(Component.Bullet.id)
            entity
        }

        /** Entity: Destroy methods*/
        def isDestroy:Boolean = entity.hasComponent(Component.Destroy.id)

        def setDestroy(value:Boolean):Entity = {
            if (value != isDestroy)
                entity.addComponent(Component.Destroy.id, destroyComponent)
            else
                entity.removeComponent(Component.Destroy.id)
            entity
        }

        /** Entity: Enemy methods*/
        def isEnemy:Boolean = entity.hasComponent(Component.Enemy.id)

        def setEnemy(value:Boolean):Entity = {
            if (value != isEnemy)
                entity.addComponent(Component.Enemy.id, enemyComponent)
            else
                entity.removeComponent(Component.Enemy.id)
            entity
        }

        /** Entity: Expires methods*/
        def expires:ExpiresComponent = entity.getComponent(Component.Expires.id).asInstanceOf[ExpiresComponent]

        def hasExpires:Boolean = entity.hasComponent(Component.Expires.id)

        def clearExpiresComponentPool() = {
            expiresComponentPool.clear()
        }

        def addExpires(delay:Float):Entity = {
            val component:ExpiresComponent = 
                if (expiresComponentPool.nonEmpty) 
                    expiresComponentPool.last.copy(delay = delay)
                else new ExpiresComponent(delay = delay)
            
            entity.addComponent(Component.Expires.id, component)
            entity
        }

        def replaceExpires(delay:Float):Entity = {
            val previousComponent = if (hasExpires) expires else null
            val component:ExpiresComponent = 
                if (expiresComponentPool.nonEmpty) 
                    expiresComponentPool.last.copy(delay = delay)
                else new ExpiresComponent(delay = delay)
            entity.replaceComponent(Component.Expires.id, component)
            if (previousComponent != null)
                expiresComponentPool += previousComponent
            entity
        }

        def removeExpires():Entity = {
            val component = expires
            entity.removeComponent(Component.Expires.id)
            expiresComponentPool += component
            entity
        }
        
        def updateExpires(component: ExpiresComponent) = {
            entity.updateComponent(Component.Expires.id, component)
        }
        /** Entity: Firing methods*/
        def isFiring:Boolean = entity.hasComponent(Component.Firing.id)

        def setFiring(value:Boolean):Entity = {
            if (value != isFiring)
                entity.addComponent(Component.Firing.id, firingComponent)
            else
                entity.removeComponent(Component.Firing.id)
            entity
        }

        /** Entity: Health methods*/
        def health:HealthComponent = entity.getComponent(Component.Health.id).asInstanceOf[HealthComponent]

        def hasHealth:Boolean = entity.hasComponent(Component.Health.id)

        def clearHealthComponentPool() = {
            healthComponentPool.clear()
        }

        def addHealth(currentHealth:Float, maximumHealth:Float):Entity = {
            val component:HealthComponent = 
                if (healthComponentPool.nonEmpty) 
                    healthComponentPool.last.copy(currentHealth = currentHealth, maximumHealth = maximumHealth)
                else new HealthComponent(currentHealth = currentHealth, maximumHealth = maximumHealth)
            
            entity.addComponent(Component.Health.id, component)
            entity
        }

        def replaceHealth(currentHealth:Float, maximumHealth:Float):Entity = {
            val previousComponent = if (hasHealth) health else null
            val component:HealthComponent = 
                if (healthComponentPool.nonEmpty) 
                    healthComponentPool.last.copy(currentHealth = currentHealth, maximumHealth = maximumHealth)
                else new HealthComponent(currentHealth = currentHealth, maximumHealth = maximumHealth)
            entity.replaceComponent(Component.Health.id, component)
            if (previousComponent != null)
                healthComponentPool += previousComponent
            entity
        }

        def removeHealth():Entity = {
            val component = health
            entity.removeComponent(Component.Health.id)
            healthComponentPool += component
            entity
        }
        
        def updateHealth(component: HealthComponent) = {
            entity.updateComponent(Component.Health.id, component)
        }
        /** Entity: Layer methods*/
        def layer:LayerComponent = entity.getComponent(Component.Layer.id).asInstanceOf[LayerComponent]

        def hasLayer:Boolean = entity.hasComponent(Component.Layer.id)

        def clearLayerComponentPool() = {
            layerComponentPool.clear()
        }

        def addLayer(ordinal:Int):Entity = {
            val component:LayerComponent = 
                if (layerComponentPool.nonEmpty) 
                    layerComponentPool.last.copy(ordinal = ordinal)
                else new LayerComponent(ordinal = ordinal)
            
            entity.addComponent(Component.Layer.id, component)
            entity
        }

        def replaceLayer(ordinal:Int):Entity = {
            val previousComponent = if (hasLayer) layer else null
            val component:LayerComponent = 
                if (layerComponentPool.nonEmpty) 
                    layerComponentPool.last.copy(ordinal = ordinal)
                else new LayerComponent(ordinal = ordinal)
            entity.replaceComponent(Component.Layer.id, component)
            if (previousComponent != null)
                layerComponentPool += previousComponent
            entity
        }

        def removeLayer():Entity = {
            val component = layer
            entity.removeComponent(Component.Layer.id)
            layerComponentPool += component
            entity
        }
        
        def updateLayer(component: LayerComponent) = {
            entity.updateComponent(Component.Layer.id, component)
        }
        /** Entity: Player methods*/
        def isPlayer:Boolean = entity.hasComponent(Component.Player.id)

        def setPlayer(value:Boolean):Entity = {
            if (value != isPlayer)
                entity.addComponent(Component.Player.id, playerComponent)
            else
                entity.removeComponent(Component.Player.id)
            entity
        }

        /** Entity: Position methods*/
        def position:PositionComponent = entity.getComponent(Component.Position.id).asInstanceOf[PositionComponent]

        def hasPosition:Boolean = entity.hasComponent(Component.Position.id)

        def clearPositionComponentPool() = {
            positionComponentPool.clear()
        }

        def addPosition(x:Float, y:Float):Entity = {
            val component:PositionComponent = 
                if (positionComponentPool.nonEmpty) 
                    positionComponentPool.last.copy(x = x, y = y)
                else new PositionComponent(x = x, y = y)
            
            entity.addComponent(Component.Position.id, component)
            entity
        }

        def replacePosition(x:Float, y:Float):Entity = {
            val previousComponent = if (hasPosition) position else null
            val component:PositionComponent = 
                if (positionComponentPool.nonEmpty) 
                    positionComponentPool.last.copy(x = x, y = y)
                else new PositionComponent(x = x, y = y)
            entity.replaceComponent(Component.Position.id, component)
            if (previousComponent != null)
                positionComponentPool += previousComponent
            entity
        }

        def removePosition():Entity = {
            val component = position
            entity.removeComponent(Component.Position.id)
            positionComponentPool += component
            entity
        }
        
        def updatePosition(component: PositionComponent) = {
            entity.updateComponent(Component.Position.id, component)
        }
        /** Entity: Resource methods*/
        def resource:ResourceComponent = entity.getComponent(Component.Resource.id).asInstanceOf[ResourceComponent]

        def hasResource:Boolean = entity.hasComponent(Component.Resource.id)

        def clearResourceComponentPool() = {
            resourceComponentPool.clear()
        }

        def addResource(name:String):Entity = {
            val component:ResourceComponent = 
                if (resourceComponentPool.nonEmpty) 
                    resourceComponentPool.last.copy(name = name)
                else new ResourceComponent(name = name)
            
            entity.addComponent(Component.Resource.id, component)
            entity
        }

        def replaceResource(name:String):Entity = {
            val previousComponent = if (hasResource) resource else null
            val component:ResourceComponent = 
                if (resourceComponentPool.nonEmpty) 
                    resourceComponentPool.last.copy(name = name)
                else new ResourceComponent(name = name)
            entity.replaceComponent(Component.Resource.id, component)
            if (previousComponent != null)
                resourceComponentPool += previousComponent
            entity
        }

        def removeResource():Entity = {
            val component = resource
            entity.removeComponent(Component.Resource.id)
            resourceComponentPool += component
            entity
        }
        
        def updateResource(component: ResourceComponent) = {
            entity.updateComponent(Component.Resource.id, component)
        }
        /** Entity: Scale methods*/
        def scale:ScaleComponent = entity.getComponent(Component.Scale.id).asInstanceOf[ScaleComponent]

        def hasScale:Boolean = entity.hasComponent(Component.Scale.id)

        def clearScaleComponentPool() = {
            scaleComponentPool.clear()
        }

        def addScale(x:Float, y:Float):Entity = {
            val component:ScaleComponent = 
                if (scaleComponentPool.nonEmpty) 
                    scaleComponentPool.last.copy(x = x, y = y)
                else new ScaleComponent(x = x, y = y)
            
            entity.addComponent(Component.Scale.id, component)
            entity
        }

        def replaceScale(x:Float, y:Float):Entity = {
            val previousComponent = if (hasScale) scale else null
            val component:ScaleComponent = 
                if (scaleComponentPool.nonEmpty) 
                    scaleComponentPool.last.copy(x = x, y = y)
                else new ScaleComponent(x = x, y = y)
            entity.replaceComponent(Component.Scale.id, component)
            if (previousComponent != null)
                scaleComponentPool += previousComponent
            entity
        }

        def removeScale():Entity = {
            val component = scale
            entity.removeComponent(Component.Scale.id)
            scaleComponentPool += component
            entity
        }
        
        def updateScale(component: ScaleComponent) = {
            entity.updateComponent(Component.Scale.id, component)
        }
        /** Entity: Score methods*/
        def score:ScoreComponent = entity.getComponent(Component.Score.id).asInstanceOf[ScoreComponent]

        def hasScore:Boolean = entity.hasComponent(Component.Score.id)

        def clearScoreComponentPool() = {
            scoreComponentPool.clear()
        }

        def addScore(value:Int):Entity = {
            val component:ScoreComponent = 
                if (scoreComponentPool.nonEmpty) 
                    scoreComponentPool.last.copy(value = value)
                else new ScoreComponent(value = value)
            
            entity.addComponent(Component.Score.id, component)
            entity
        }

        def replaceScore(value:Int):Entity = {
            val previousComponent = if (hasScore) score else null
            val component:ScoreComponent = 
                if (scoreComponentPool.nonEmpty) 
                    scoreComponentPool.last.copy(value = value)
                else new ScoreComponent(value = value)
            entity.replaceComponent(Component.Score.id, component)
            if (previousComponent != null)
                scoreComponentPool += previousComponent
            entity
        }

        def removeScore():Entity = {
            val component = score
            entity.removeComponent(Component.Score.id)
            scoreComponentPool += component
            entity
        }
        
        def updateScore(component: ScoreComponent) = {
            entity.updateComponent(Component.Score.id, component)
        }
        /** Entity: SoundEffect methods*/
        def soundEffect:SoundEffectComponent = entity.getComponent(Component.SoundEffect.id).asInstanceOf[SoundEffectComponent]

        def hasSoundEffect:Boolean = entity.hasComponent(Component.SoundEffect.id)

        def clearSoundEffectComponentPool() = {
            soundEffectComponentPool.clear()
        }

        def addSoundEffect(effect:Int):Entity = {
            val component:SoundEffectComponent = 
                if (soundEffectComponentPool.nonEmpty) 
                    soundEffectComponentPool.last.copy(effect = effect)
                else new SoundEffectComponent(effect = effect)
            
            entity.addComponent(Component.SoundEffect.id, component)
            entity
        }

        def replaceSoundEffect(effect:Int):Entity = {
            val previousComponent = if (hasSoundEffect) soundEffect else null
            val component:SoundEffectComponent = 
                if (soundEffectComponentPool.nonEmpty) 
                    soundEffectComponentPool.last.copy(effect = effect)
                else new SoundEffectComponent(effect = effect)
            entity.replaceComponent(Component.SoundEffect.id, component)
            if (previousComponent != null)
                soundEffectComponentPool += previousComponent
            entity
        }

        def removeSoundEffect():Entity = {
            val component = soundEffect
            entity.removeComponent(Component.SoundEffect.id)
            soundEffectComponentPool += component
            entity
        }
        
        def updateSoundEffect(component: SoundEffectComponent) = {
            entity.updateComponent(Component.SoundEffect.id, component)
        }
        /** Entity: Tint methods*/
        def tint:TintComponent = entity.getComponent(Component.Tint.id).asInstanceOf[TintComponent]

        def hasTint:Boolean = entity.hasComponent(Component.Tint.id)

        def clearTintComponentPool() = {
            tintComponentPool.clear()
        }

        def addTint(r:Float, g:Float, b:Float, a:Float):Entity = {
            val component:TintComponent = 
                if (tintComponentPool.nonEmpty) 
                    tintComponentPool.last.copy(r = r, g = g, b = b, a = a)
                else new TintComponent(r = r, g = g, b = b, a = a)
            
            entity.addComponent(Component.Tint.id, component)
            entity
        }

        def replaceTint(r:Float, g:Float, b:Float, a:Float):Entity = {
            val previousComponent = if (hasTint) tint else null
            val component:TintComponent = 
                if (tintComponentPool.nonEmpty) 
                    tintComponentPool.last.copy(r = r, g = g, b = b, a = a)
                else new TintComponent(r = r, g = g, b = b, a = a)
            entity.replaceComponent(Component.Tint.id, component)
            if (previousComponent != null)
                tintComponentPool += previousComponent
            entity
        }

        def removeTint():Entity = {
            val component = tint
            entity.removeComponent(Component.Tint.id)
            tintComponentPool += component
            entity
        }
        
        def updateTint(component: TintComponent) = {
            entity.updateComponent(Component.Tint.id, component)
        }
        /** Entity: Tween methods*/
        def tween:TweenComponent = entity.getComponent(Component.Tween.id).asInstanceOf[TweenComponent]

        def hasTween:Boolean = entity.hasComponent(Component.Tween.id)

        def clearTweenComponentPool() = {
            tweenComponentPool.clear()
        }

        def addTween(min:Float, max:Float, speed:Float, repeat:Boolean, active:Boolean):Entity = {
            val component:TweenComponent = 
                if (tweenComponentPool.nonEmpty) 
                    tweenComponentPool.last.copy(min = min, max = max, speed = speed, repeat = repeat, active = active)
                else new TweenComponent(min = min, max = max, speed = speed, repeat = repeat, active = active)
            
            entity.addComponent(Component.Tween.id, component)
            entity
        }

        def replaceTween(min:Float, max:Float, speed:Float, repeat:Boolean, active:Boolean):Entity = {
            val previousComponent = if (hasTween) tween else null
            val component:TweenComponent = 
                if (tweenComponentPool.nonEmpty) 
                    tweenComponentPool.last.copy(min = min, max = max, speed = speed, repeat = repeat, active = active)
                else new TweenComponent(min = min, max = max, speed = speed, repeat = repeat, active = active)
            entity.replaceComponent(Component.Tween.id, component)
            if (previousComponent != null)
                tweenComponentPool += previousComponent
            entity
        }

        def removeTween():Entity = {
            val component = tween
            entity.removeComponent(Component.Tween.id)
            tweenComponentPool += component
            entity
        }
        
        def updateTween(component: TweenComponent) = {
            entity.updateComponent(Component.Tween.id, component)
        }
        /** Entity: Velocity methods*/
        def velocity:VelocityComponent = entity.getComponent(Component.Velocity.id).asInstanceOf[VelocityComponent]

        def hasVelocity:Boolean = entity.hasComponent(Component.Velocity.id)

        def clearVelocityComponentPool() = {
            velocityComponentPool.clear()
        }

        def addVelocity(x:Float, y:Float):Entity = {
            val component:VelocityComponent = 
                if (velocityComponentPool.nonEmpty) 
                    velocityComponentPool.last.copy(x = x, y = y)
                else new VelocityComponent(x = x, y = y)
            
            entity.addComponent(Component.Velocity.id, component)
            entity
        }

        def replaceVelocity(x:Float, y:Float):Entity = {
            val previousComponent = if (hasVelocity) velocity else null
            val component:VelocityComponent = 
                if (velocityComponentPool.nonEmpty) 
                    velocityComponentPool.last.copy(x = x, y = y)
                else new VelocityComponent(x = x, y = y)
            entity.replaceComponent(Component.Velocity.id, component)
            if (previousComponent != null)
                velocityComponentPool += previousComponent
            entity
        }

        def removeVelocity():Entity = {
            val component = velocity
            entity.removeComponent(Component.Velocity.id)
            velocityComponentPool += component
            entity
        }
        
        def updateVelocity(component: VelocityComponent) = {
            entity.updateComponent(Component.Velocity.id, component)
        }
        /** Entity: View methods*/
        def view:ViewComponent = entity.getComponent(Component.View.id).asInstanceOf[ViewComponent]

        def hasView:Boolean = entity.hasComponent(Component.View.id)

        def clearViewComponentPool() = {
            viewComponentPool.clear()
        }

        def addView(sprite:com.badlogic.gdx.graphics.g2d.Sprite):Entity = {
            val component:ViewComponent = 
                if (viewComponentPool.nonEmpty) 
                    viewComponentPool.last.copy(sprite = sprite)
                else new ViewComponent(sprite = sprite)
            
            entity.addComponent(Component.View.id, component)
            entity
        }

        def replaceView(sprite:com.badlogic.gdx.graphics.g2d.Sprite):Entity = {
            val previousComponent = if (hasView) view else null
            val component:ViewComponent = 
                if (viewComponentPool.nonEmpty) 
                    viewComponentPool.last.copy(sprite = sprite)
                else new ViewComponent(sprite = sprite)
            entity.replaceComponent(Component.View.id, component)
            if (previousComponent != null)
                viewComponentPool += previousComponent
            entity
        }

        def removeView():Entity = {
            val component = view
            entity.removeComponent(Component.View.id)
            viewComponentPool += component
            entity
        }
        
        def updateView(component: ViewComponent) = {
            entity.updateComponent(Component.View.id, component)
        }
    }
}