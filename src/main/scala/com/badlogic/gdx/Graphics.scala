/*******************************************************************************
  * Copyright 2011 See AUTHORS file.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  ******************************************************************************/
package com.badlogic.gdx

import scala.scalajs.js
import scala.scalajs.js.annotation.JSName

/** This interface encapsulates communication with the graphics processor. Depending on the available hardware and the current
  * {@link Application} configuration, access to {@link GL20} and {@link GL30} are provided here.
  * <p>
  * If supported by the backend, this interface lets you query the available display modes (graphics resolution and color depth)
  * and change it.
  * <p>
  * This interface can be used to switch between continuous and non-continuous rendering (see
  * {@link #setContinuousRendering(boolean)}), and to explicitly {@link #requestRendering()}.
  * <p>
  * There are many more utility classes that are not directly generated by the {@link Graphics} interfaces. See {@link VertexArray}
  * , {@link VertexBufferObject}, {@link IndexBufferObject}, {@link Mesh}, {@link ShaderProgram} and {@link FrameBuffer},
  * {@link BitmapFont}, {@link Batch} and so on. All these classes are managed, meaning they don't need to be reloaded on a context
  * loss. Explore the com.badlogic.gdx.graphics package for more classes that might come in handy.
  * @author mzechner */
@JSName("gdx.Graphics")
@js.native
trait Graphics extends js.Object {

  /** @return the time span between the current frame and the last frame in seconds. Might be smoothed over n frames. */
  def getDeltaTime(): Float = js.native

  /** @return the width of the client area in logical pixels. */
  def getWidth(): Int = js.native

  /** @return the height of the client area in logical pixels */
  def getHeight(): Int = js.native

  /** This is a scaling factor for the Density Independent Pixel unit, following the same conventions as
    * android.util.DisplayMetrics#density, where one DIP is one pixel on an approximately 160 dpi screen. Thus on a 160dpi screen
    * this density value will be 1; on a 120 dpi screen it would be .75; etc.
    *
    * @return the logical density of the Display. */
  def getDensity(): Int = js.native

}
