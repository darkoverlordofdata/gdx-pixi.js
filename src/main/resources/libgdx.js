// Generated by CoffeeScript 1.10.0
/*
 *
 *  Preload module cache
 *
 */
var define;
define = {
    env: {
        pixi: {
            id: 'pixi',
            exports: PIXI
        }
    }
};
// Generated by CoffeeScript 1.10.0
/*
 * AMD Module self loader
 * fallback to global require
 *
 */
var define;
define = (function (global, modules) {
    /*
     *  require module
     *
     * shims for late loading globals
     * fallback to global require
     *
     * @param name
     * @returns module reference for name
     */
    var require;
    require = function (name) {
        if (modules[name] != null) {
            return modules[name].exports;
        }
        else {
            return global != null ? global.require(name) : void 0;
        }
    };
    /*
     *  define module
     *
     * @param name of module
     * @param deps for module
     * @param callback to the module cide itself
     */
    define = function (name, deps, callback) {
        var args;
        modules[name] = {
            id: name,
            exports: {}
        };
        args = [require, modules[name].exports];
        deps.slice(2).forEach(function (dep) {
            return args.push(modules[dep].exports);
        });
        callback.apply(modules[name].exports, args);
    };
    /*
     *  define,global
     *
     * @param name
     * @param module
     */
    define.global = function (name, module) {
        return global[name] = module;
    };
    /*
     *  define,register
     *
     * @param name
     * @param exports
     */
    define.register = function (name, exports) {
        return modules[name] = {
            id: name,
            exports: {}
        };
    };
    define.env = modules;
    return define;
})(this, define.env || {});
define("gdx/audio/Sound", ["require", "exports"], function (require, exports) {
    "use strict";
    // Generated by CoffeeScript 1.10.0
    var Sound;
    Sound = (function () {
        function Sound() { }
        Sound.prototype.play = function () { };
        return Sound;
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Sound;
});
define("gdx/files/FileHandle", ["require", "exports"], function (require, exports) {
    "use strict";
    // Generated by CoffeeScript 1.10.0
    var FileHandle;
    FileHandle = (function () {
        function FileHandle(path) {
            this.path = path;
        }
        FileHandle.prototype.readString = function () {
            return Gdx._internal[this.path].xhr.responseText;
        };
        return FileHandle;
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = FileHandle;
});
// Generated by CoffeeScript 1.10.0
define("gdx/Gdx", ["require", "exports"], function (require, exports) {
    "use strict";
    /*
     * @JSName("Gdx")
     */
    var Gdx;
    Gdx = (function () {
        function Gdx() { }
        Gdx.app = null;
        Gdx.graphics = null;
        Gdx.audio = null;
        Gdx.files = null;
        Gdx.input = null;
        Gdx.get = null;
        Gdx.gl = null;
        Gdx._resources = null;
        Gdx._internal = null;
        Gdx._renderer = null;
        Gdx._stage = null;
        Gdx._scaling = 1;
        Gdx._scaleX = 1;
        Gdx._scaleY = 1;
        Gdx._height = 0;
        Gdx._width = 0;
        return Gdx;
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Gdx;
});
define("gdx/graphics/g2d/Batch", ["require", "exports", "gdx/Gdx"], function (require, exports, Gdx_1) {
    "use strict";
    var Batch, pixi;
    pixi = require('pixi');
    Batch = (function () {
        function Batch() {
            this.sprites = new pixi.Container();
            Gdx_1.default._stage.addChild(this.sprites);
        }
        Batch.prototype.begin = function () {
            return this.sprites.children.length = 0;
        };
        Batch.prototype.draw = function (texture, x, y, width, height) {
            if (width == null) {
                width = -1;
            }
            if (height == null) {
                height = -1;
            }
            if (texture.texture) {
                this.sprites.addChild(texture.texture.sprite);
                texture.texture.sprite.x = x;
                return texture.texture.sprite.y = y;
            }
            else {
                this.sprites.addChild(texture);
                texture.x = x;
                return texture.y = y;
            }
        };
        Batch.prototype.end = function () {
            return Gdx_1.default._renderer.render(Gdx_1.default._stage);
        };
        Batch.prototype.setProjectionMatrix = function (projection) { };
        return Batch;
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Batch;
});
define("gdx/graphics/g2d/BitmapFont", ["require", "exports", "gdx/Gdx"], function (require, exports, Gdx_2) {
    "use strict";
    /*
     * @JSName("gdx.graphics.g2d.BitmapFont")
     */
    var BitmapFont, pixi;
    pixi = require('pixi');
    BitmapFont = (function () {
        function BitmapFont(fontFile, region, integer1) {
            var dom, name;
            this.fontFile = fontFile;
            this.region = region;
            this.integer = integer1;
            name = this.fontFile.path.split('/').pop().split('.')[0];
            dom = (new DOMParser()).parseFromString(Gdx_2.default._resources[name].xhr.responseText, 'text/xml');
            this.face = dom.evaluate('/font/info/@face', dom, null, XPathResult.STRING_TYPE, null).stringValue;
            this.size = dom.evaluate('/font/info/@size', dom, null, XPathResult.STRING_TYPE, null).stringValue;
        }
        BitmapFont.prototype.setUseIntegerPositions = function (integer) { };
        BitmapFont.prototype.getWidth = function () { };
        BitmapFont.prototype.getHeight = function () { };
        BitmapFont.prototype.draw = function (batch, str, x, y) {
            var texture;
            texture = new pixi.extras.BitmapText(str, {
                font: this.size + "px " + this.face,
                align: 'right'
            });
            return batch.draw(texture, x, Gdx_2.default._height - y);
        };
        return BitmapFont;
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = BitmapFont;
});
// Generated by CoffeeScript 1.10.0
define("gdx/graphics/g2d/TextureRegion", ["require", "exports"], function (require, exports) {
    "use strict";
    /*
     * @JSName("gdx.graphics.g2d.TextureRegion")
     */
    var TextureRegion;
    TextureRegion = (function () {
        function TextureRegion(texture) {
            this.texture = texture;
        }
        return TextureRegion;
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = TextureRegion;
});
define("gdx/graphics/g2d/Sprite", ["require", "exports", "gdx/Gdx", "gdx/graphics/g2d/TextureRegion"], function (require, exports, Gdx_3, TextureRegion_1) {
    "use strict";
    /*
     * @JSName("gdx.graphics.g2d.Sprite")
     */
    var Sprite, extend = function (child, parent) { for (var key in parent) {
        if (hasProp.call(parent, key))
            child[key] = parent[key];
    } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;
    Sprite = (function (superClass) {
        extend(Sprite, superClass);
        function Sprite(texture) {
            Sprite.__super__.constructor.call(this, texture);
        }
        Sprite.prototype.getWidth = function () {
            return this.texture.sprite._texture.width;
        };
        Sprite.prototype.getHeight = function () {
            return this.texture.sprite._texture.height;
        };
        Sprite.prototype.setX = function (value) { };
        Sprite.prototype.setY = function (value) { };
        Sprite.prototype.setColor = function (red, green, blue, alpha) { };
        Sprite.prototype.setScale = function (x, y) {
            return this.texture.sprite.scale.set(x, y);
        };
        Sprite.prototype.setPosition = function (x, y) {
            return this.texture.sprite.position.set(x, Gdx_3.default.graphics.getHeight() - y - this.texture.sprite._texture.height);
        };
        Sprite.prototype.draw = function (batch) {
            return batch.draw(this, this.texture.sprite.position.x, this.texture.sprite.position.y);
        };
        return Sprite;
    })(TextureRegion_1.default);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Sprite;
});
define("gdx/graphics/g2d/SpriteBatch", ["require", "exports", "gdx/graphics/g2d/Batch"], function (require, exports, Batch_1) {
    "use strict";
    /*
     * @JSName("gdx.graphics.g2d.SpriteBatch")
     */
    var SpriteBatch, extend = function (child, parent) { for (var key in parent) {
        if (hasProp.call(parent, key))
            child[key] = parent[key];
    } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;
    SpriteBatch = (function (superClass) {
        extend(SpriteBatch, superClass);
        function SpriteBatch() {
            return SpriteBatch.__super__.constructor.apply(this, arguments);
        }
        return SpriteBatch;
    })(Batch_1.default);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = SpriteBatch;
});
// Generated by CoffeeScript 1.10.0
define("gdx/graphics/g2d/TextureAtlas", ["require", "exports"], function (require, exports) {
    "use strict";
    /*
     * @JSName("gdx.graphics.g2d.TextureAtlas")
     */
    var TextureAtlas;
    TextureAtlas = (function () {
        function TextureAtlas(packFile) {
            this.packFile = packFile;
        }
        TextureAtlas.prototype.createSprite = function (name) { };
        return TextureAtlas;
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = TextureAtlas;
});
// Generated by CoffeeScript 1.10.0
define("gdx/math/Vector3", ["require", "exports"], function (require, exports) {
    "use strict";
    /*
     * @JSName("gdx.math.Vector3")
     */
    var Vector3;
    Vector3 = (function () {
        function Vector3() {
            this.set(0, 0, 0);
        }
        Vector3.prototype.set = function (x, y, z) {
            this.x = x;
            this.y = y;
            return this.z = z;
        };
        return Vector3;
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Vector3;
});
define("gdx/graphics/Camera", ["require", "exports", "gdx/math/Vector3"], function (require, exports, Vector3_1) {
    "use strict";
    /*
     * @JSName("gdx.graphics.Camera")
     */
    var Camera;
    Camera = (function () {
        function Camera(viewportWidth, viewportHeight) {
            this.viewportWidth = viewportWidth;
            this.viewportHeight = viewportHeight;
            this.position = new Vector3_1.default();
        }
        Camera.prototype.update = function () { };
        return Camera;
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Camera;
});
define("gdx/graphics/GL20", ["require", "exports", "gdx/Gdx"], function (require, exports, Gdx_4) {
    "use strict";
    /*
     * @JSName("gdx.graphics.GL20")
     */
    var GL20;
    GL20 = (function () {
        function GL20() { }
        GL20.GL_COLOR_BUFFER_BIT = 0x00004000;
        GL20.GL_NEAREST = 0x2600;
        GL20.GL_LINEAR = 0x2601;
        GL20.GL_LINEAR_MIPMAP_LINEAR = 0x2703;
        GL20.GL_NEAREST_MIPMAP_NEAREST = 0x2700;
        GL20.GL_LINEAR_MIPMAP_NEAREST = 0x2701;
        GL20.GL_NEAREST_MIPMAP_LINEAR = 0x2702;
        GL20.GL_LINEAR_MIPMAP_LINEAR = 0x2703;
        GL20.prototype.glClearColor = function (red, green, blue, alpha) {
            var hexColor;
            hexColor = (1 << 24) + (red * 255 << 16) + (green * 255 << 8) + blue * 255;
            return Gdx_4.default._renderer.backgroundColor = hexColor;
        };
        GL20.prototype.glClear = function (mask) { };
        return GL20;
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = GL20;
});
define("gdx/graphics/OrthographicCamera", ["require", "exports", "gdx/graphics/Camera"], function (require, exports, Camera_1) {
    "use strict";
    /*
     * @JSName("gdx.graphics.OrthographicCamera")
     */
    var OrthographicCamera, extend = function (child, parent) { for (var key in parent) {
        if (hasProp.call(parent, key))
            child[key] = parent[key];
    } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;
    OrthographicCamera = (function (superClass) {
        extend(OrthographicCamera, superClass);
        function OrthographicCamera(viewportWidth, viewportHeight) {
            OrthographicCamera.__super__.constructor.call(this, viewportWidth, viewportHeight);
            this.combined = null;
        }
        OrthographicCamera.prototype.update = function () { };
        return OrthographicCamera;
    })(Camera_1.default);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = OrthographicCamera;
});
define("gdx/graphics/Texture", ["require", "exports", "gdx/graphics/GL20", "gdx/Gdx"], function (require, exports, GL20_1, Gdx_5) {
    "use strict";
    /*
     * @JSName("gdx.graphics.Texture")
     */
    var Texture, pixi;
    pixi = require('pixi');
    Texture = (function () {
        Texture.uniqueId = 0;
        Texture.TextureFilter = {
            Nearest: GL20_1.default.GL_NEAREST,
            Linear: GL20_1.default.GL_LINEAR,
            MipMap: GL20_1.default.GL_LINEAR_MIPMAP_LINEAR,
            MipMapNearestNearest: GL20_1.default.GL_NEAREST_MIPMAP_NEAREST,
            MipMapLinearNearest: GL20_1.default.GL_LINEAR_MIPMAP_NEAREST,
            MipMapNearestLinear: GL20_1.default.GL_NEAREST_MIPMAP_LINEAR,
            MipMapLinearLinear: GL20_1.default.GL_LINEAR_MIPMAP_LINEAR
        };
        function Texture(path) {
            if (typeof path === 'string') {
                this.path = Gdx_5.default._resources[path] != null ? Gdx_5.default._resources[path].url : path;
            }
            else {
                this.path = path.path;
            }
            this.sprite = pixi.Sprite.fromImage(this.path);
            this.id = Texture.uniqueId++;
        }
        Texture.prototype.setFilter = function (minFilter, magFilter) { };
        return Texture;
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Texture;
});
// Generated by CoffeeScript 1.10.0
define("gdx/scenes/scene2d/utils/ClickListener", ["require", "exports"], function (require, exports) {
    "use strict";
    /*
     * @JSName("gdx.scenes.scene2d.utils.ClickListener")
     */
    var ClickListener;
    ClickListener = (function () {
        function ClickListener() { }
        ClickListener.prototype.clicked = function (event, x, y) { };
        return ClickListener;
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = ClickListener;
});
// Generated by CoffeeScript 1.10.0
define("gdx/scenes/scene2d/Actor", ["require", "exports"], function (require, exports) {
    "use strict";
    /*
     * @JSName("gdx.scenes.scene2d.Actor")
     */
    var Actor;
    Actor = (function () {
        function Actor() {
            this.width = 0;
            this.height = 0;
            this.x = 0;
            this.y = 0;
            this.scale = 0;
            this.listeners = [];
        }
        Actor.prototype.getWidth = function () {
            return Math.ceil(this.width);
        };
        Actor.prototype.getHeight = function () {
            return Math.ceil(this.height);
        };
        Actor.prototype.setX = function (x) {
            return this.x = x;
        };
        Actor.prototype.setY = function (y) {
            return this.y = y;
        };
        Actor.prototype.setScale = function (scaleXY) {
            return this.scale = scaleXY;
        };
        Actor.prototype.addListener = function (listener) {
            console.log(listener);
            return this.listeners.push(listener);
        };
        return Actor;
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Actor;
});
// Generated by CoffeeScript 1.10.0
define("gdx/scenes/scene2d/Event", ["require", "exports"], function (require, exports) {
    "use strict";
    /*
     * @JSName("gdx.scenes.scene2d.Event")
     */
    var Event;
    Event = (function () {
        function Event() { }
        return Event;
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Event;
});
// Generated by CoffeeScript 1.10.0
define("gdx/scenes/scene2d/EventListener", ["require", "exports"], function (require, exports) {
    "use strict";
    /*
     * @JSName("gdx.scenes.scene2d.EventListener")
     */
    var EventListener;
    EventListener = (function () {
        function EventListener() { }
        return EventListener;
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = EventListener;
});
// Generated by CoffeeScript 1.10.0
define("gdx/scenes/scene2d/InputEvent", ["require", "exports"], function (require, exports) {
    "use strict";
    /*
     * @JSName("gdx.scenes.scene2d.InputEvent")
     */
    var InputEvent;
    InputEvent = (function () {
        function InputEvent() { }
        return InputEvent;
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = InputEvent;
});
define("gdx/scenes/scene2d/InputListener", ["require", "exports", "gdx/scenes/scene2d/EventListener"], function (require, exports, EventListener_1) {
    "use strict";
    /*
     * @JSName("gdx.scenes.scene2d.InputListener")
     */
    var InputListener, extend = function (child, parent) { for (var key in parent) {
        if (hasProp.call(parent, key))
            child[key] = parent[key];
    } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;
    InputListener = (function (superClass) {
        extend(InputListener, superClass);
        function InputListener() {
            return InputListener.__super__.constructor.apply(this, arguments);
        }
        return InputListener;
    })(EventListener_1.default);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = InputListener;
});
// Generated by CoffeeScript 1.10.0
define("gdx/utils/Scaling", ["require", "exports"], function (require, exports) {
    "use strict";
    /*
     * @JSName("gdx.utils.Scaling")
     */
    var Scaling;
    Scaling = (function () {
        function Scaling() { }
        Scaling[Scaling.fit = 0] = 'fit';
        Scaling[Scaling.fill = 1] = 'fill';
        Scaling[Scaling.fillX = 2] = 'fillX';
        Scaling[Scaling.fillY = 3] = 'fillY';
        Scaling[Scaling.stretch = 4] = 'stretch';
        Scaling[Scaling.stretchX = 5] = 'stretchX';
        Scaling[Scaling.stretchY = 6] = 'stretchY';
        Scaling[Scaling.none = 7] = 'none';
        return Scaling;
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Scaling;
});
// Generated by CoffeeScript 1.10.0
define("gdx/utils/viewport/Viewport", ["require", "exports"], function (require, exports) {
    "use strict";
    /*
     * @JSName("gdx.utils.viewport.Viewport")
     */
    var Viewport;
    Viewport = (function () {
        function Viewport() { }
        Viewport.prototype.update = function (x, y) { };
        /*
        * applyCamera
        *
        * Calls to the apply method of an object x map to
        * calling x, i.e., x(...) instead of x.apply(...).
        * @see https://www.scala-js.org/doc/interoperability/facade-types.html
         */
        Viewport.prototype.applyCamera = function () { };
        return Viewport;
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Viewport;
});
define("gdx/utils/viewport/ScalingViewport", ["require", "exports", "gdx/utils/viewport/Viewport", "gdx/graphics/OrthographicCamera"], function (require, exports, Viewport_1, OrthographicCamera_1) {
    "use strict";
    /*
     * @JSName("gdx.utils.viewport.ScalingViewport")
     */
    var ScalingViewport, extend = function (child, parent) { for (var key in parent) {
        if (hasProp.call(parent, key))
            child[key] = parent[key];
    } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;
    ScalingViewport = (function (superClass) {
        extend(ScalingViewport, superClass);
        function ScalingViewport(scaling, worldWidth, worldHeight, camera) {
            ScalingViewport.__super__.constructor.call(this);
            this.scaling = scaling;
            this.worldWidth = worldWidth;
            this.worldHeight = worldHeight;
            this.camera = camera != null ? camera : new OrthographicCamera_1.default();
        }
        return ScalingViewport;
    })(Viewport_1.default);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = ScalingViewport;
});
define("gdx/utils/viewport/FillViewport", ["require", "exports", "gdx/utils/Scaling", "gdx/utils/viewport/ScalingViewport"], function (require, exports, Scaling_1, ScalingViewport_1) {
    "use strict";
    /*
     * @JSName("gdx.utils.viewport.FillViewport")
     */
    var FillViewport, extend = function (child, parent) { for (var key in parent) {
        if (hasProp.call(parent, key))
            child[key] = parent[key];
    } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;
    FillViewport = (function (superClass) {
        extend(FillViewport, superClass);
        function FillViewport(worldWidth, worldHeight, camera) {
            FillViewport.__super__.constructor.call(this, Scaling_1.default.fill, worldWidth, worldHeight, camera);
        }
        return FillViewport;
    })(ScalingViewport_1.default);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = FillViewport;
});
define("gdx/utils/viewport/FitViewport", ["require", "exports", "gdx/utils/Scaling", "gdx/utils/viewport/ScalingViewport"], function (require, exports, Scaling_2, ScalingViewport_2) {
    "use strict";
    /*
     * @JSName("gdx.utils.viewport.FitViewport")
     */
    var FitViewport, extend = function (child, parent) { for (var key in parent) {
        if (hasProp.call(parent, key))
            child[key] = parent[key];
    } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;
    FitViewport = (function (superClass) {
        extend(FitViewport, superClass);
        function FitViewport(worldWidth, worldHeight, camera) {
            FitViewport.__super__.constructor.call(this, Scaling_2.default.fit, worldWidth, worldHeight, camera);
        }
        return FitViewport;
    })(ScalingViewport_2.default);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = FitViewport;
});
define("gdx/Audio", ["require", "exports", "gdx/audio/Sound"], function (require, exports, Sound_1) {
    "use strict";
    var Audio;
    Audio = (function () {
        function Audio() { }
        Audio.prototype.newSound = function (raw) {
            return new Sound_1.default(raw);
        };
        return Audio;
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Audio;
});
define("gdx/Files", ["require", "exports", "gdx/files/FileHandle"], function (require, exports, FileHandle_1) {
    "use strict";
    /*
     * @JSName("gdx.Files")
     */
    var Files;
    Files = (function () {
        function Files() { }
        Files.prototype.internal = function (path) {
            return new FileHandle_1.default(path);
        };
        return Files;
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Files;
});
define("gdx/Graphics", ["require", "exports", "gdx/graphics/GL20", "gdx/Gdx"], function (require, exports, GL20_2, Gdx_6) {
    "use strict";
    /*
     * @JSName("gdx.Graphics")
     */
    var Graphics;
    Graphics = (function () {
        function Graphics(config) {
            this.config = config;
            this.gl20 = new GL20_2.default();
            this.frameId = -1;
            this.lastTime = 0;
            this.deltaTime = 0;
            this.frames = 0;
            this.time = 0;
            this.fps = 0;
        }
        Graphics.prototype.getDeltaTime = function () {
            return this.deltaTime;
        };
        Graphics.prototype.getWidth = function () {
            return this.config.width;
        };
        Graphics.prototype.getHeight = function () {
            return this.config.height;
        };
        Graphics.prototype.getDensity = function () {
            return window.devicePixelRatio;
        };
        Graphics.prototype.setupDisplay = function () {
            return Gdx_6.default.gl = this.gl20;
        };
        Graphics.prototype.update = function (time) {
            if (this.lastTime <= 0) {
                this.lastTime = time;
                return;
            }
            this.deltaTime = (time - this.lastTime) * .001;
            this.lastTime = time;
            this.time += this.deltaTime;
            this.frames++;
            if (this.time > 1) {
                this.fps = this.frames;
                this.time = 0;
                return this.frames = 0;
            }
        };
        return Graphics;
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Graphics;
});
define("gdx/Input", ["require", "exports", "gdx/Gdx"], function (require, exports, Gdx_7) {
    "use strict";
    /*
     * @JSName("gdx.Input.Buttons")
     */
    var Buttons, Input, Keys;
    Buttons = (function () {
        function Buttons() { }
        Buttons[Buttons.LEFT = 0] = 'LEFT';
        Buttons[Buttons.RIGHT = 1] = 'RIGHT';
        Buttons[Buttons.MIDDLE = 2] = 'MIDDLE';
        Buttons[Buttons.BACK = 3] = 'BACK';
        Buttons[Buttons.FORWARD = 4] = 'FORWARD';
        return Buttons;
    })();
    /*
     * @JSName("gdx.InpuyKeys")
     */
    Keys = (function () {
        function Keys() { }
        Keys.ANY_KEY = -1;
        Keys.NUM_0 = 96;
        Keys.NUM_1 = 97;
        Keys.NUM_2 = 98;
        Keys.NUM_3 = 99;
        Keys.NUM_4 = 100;
        Keys.NUM_5 = 101;
        Keys.NUM_6 = 102;
        Keys.NUM_7 = 103;
        Keys.NUM_8 = 104;
        Keys.NUM_9 = 105;
        Keys.A = 65;
        Keys.B = 66;
        Keys.BACKSLASH = 220;
        Keys.C = 67;
        Keys.COMMA = 188;
        Keys.D = 68;
        Keys.DEL = 46;
        Keys.BACKSPACE = 8;
        Keys.DOWN = 40;
        Keys.LEFT = 37;
        Keys.RIGHT = 39;
        Keys.UP = 38;
        Keys.E = 69;
        Keys.EQUALS = 187;
        Keys.F = 70;
        Keys.G = 71;
        Keys.H = 72;
        Keys.HOME = 36;
        Keys.I = 73;
        Keys.J = 74;
        Keys.K = 75;
        Keys.L = 76;
        Keys.LEFT_BRACKET = 219;
        Keys.M = 77;
        Keys.MINUS = 189;
        Keys.N = 78;
        Keys.O = 79;
        Keys.P = 80;
        Keys.PERIOD = 190;
        Keys.PLUS = 187;
        Keys.Q = 81;
        Keys.R = 82;
        Keys.RIGHT_BRACKET = 221;
        Keys.S = 83;
        Keys.SEMICOLON = 186;
        Keys.SLASH = 191;
        Keys.SPACE = 32;
        Keys.T = 84;
        Keys.TAB = 9;
        Keys.U = 85;
        Keys.UNKNOWN = 0;
        Keys.V = 86;
        Keys.W = 87;
        Keys.X = 88;
        Keys.Y = 89;
        Keys.Z = 90;
        Keys.ESCAPE = 27;
        Keys.END = 35;
        Keys.INSERT = 45;
        Keys.PAGE_UP = 33;
        Keys.PAGE_DOWN = 34;
        Keys.COLON = 186;
        return Keys;
    })();
    /*
     * @JSName("gdx.Input")
     */
    Input = (function () {
        function Input() { }
        Input.Buttons = Object.freeze(Buttons);
        Input.Keys = Object.freeze(Keys);
        Input.prototype.setInputProcessor = function (processor) {
            Gdx_7.default._processor = processor;
            document.addEventListener('touchstart', (function (_this) {
                return function (event) {
                    var pixel;
                    pixel = window.devicePixelRatio;
                    event = event.targetTouches != null ? event.targetTouches[0] : event;
                    return Gdx_7.default._processor.touchDown(Math.ceil(event.clientX / Gdx_7.default._scaleX * pixel), Math.ceil(event.clientY / Gdx_7.default._scaleY * pixel), 0, 0);
                };
            })(this), true);
            document.addEventListener('touchmove', (function (_this) {
                return function (event) {
                    var pixel;
                    pixel = window.devicePixelRatio;
                    event = event.targetTouches != null ? event.targetTouches[0] : event;
                    return Gdx_7.default._processor.touchDragged(Math.ceil(event.clientX / Gdx_7.default._scaleX * pixel), Math.ceil(event.clientY / Gdx_7.default._scaleY * pixel), 0);
                };
            })(this), true);
            document.addEventListener('touchend', (function (_this) {
                return function (event) {
                    event = event.targetTouches != null ? event.targetTouches[0] : event;
                    return Gdx_7.default._processor.touchUp(0, 0, 0, 0);
                };
            })(this), true);
            document.addEventListener('mousedown', (function (_this) {
                return function (event) {
                    return Gdx_7.default._processor.touchDown(Math.ceil(event.clientX / Gdx_7.default._scaleX), Math.ceil(event.clientY / Gdx_7.default._scaleY), -1, event.button);
                };
            })(this), true);
            document.addEventListener('mousemove', (function (_this) {
                return function (event) {
                    return Gdx_7.default._processor.mouseMoved(Math.ceil(event.clientX / Gdx_7.default._scaleX), Math.ceil(event.clientY / Gdx_7.default._scaleY));
                };
            })(this), true);
            document.addEventListener('mouseup', (function (_this) {
                return function (event) {
                    return Gdx_7.default._processor.touchUp(Math.ceil(event.clientX / Gdx_7.default._scaleX), Math.ceil(event.clientY / Gdx_7.default._scaleY), -1, event.button);
                };
            })(this), true);
            window.addEventListener('keydown', ((function (_this) {
                return function (event) {
                    return Gdx_7.default._processor.keyDown(event.which);
                };
            })(this)), true);
            return window.addEventListener('keyup', ((function (_this) {
                return function (event) {
                    return Gdx_7.default._processor.keyUp(event.which);
                };
            })(this)), true);
        };
        return Input;
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Input;
});
define("gdx/JsApplication", ["require", "exports", "gdx/Graphics", "gdx/Audio", "gdx/Files", "gdx/Input", "gdx/Gdx", "gdx/utils/Scaling"], function (require, exports, Graphics_1, Audio_1, Files_1, Input_1, Gdx_8, Scaling_3) {
    "use strict";
    var JsApplication, getJSON, pixi, resize;
    pixi = require('pixi');
    resize = function () {
        switch (Gdx_8.default._scaling) {
            case Scaling_3.default.fit:
                Gdx_8.default._scaleX = Gdx_8.default._scaleY = Math.max(window.innerWidth / Gdx_8.default._width, window.innerHeight / Gdx_8.default._height);
                break;
            case Scaling_3.default.fill:
                Gdx_8.default._scaleX = Gdx_8.default._scaleY = Math.min(window.innerWidth / Gdx_8.default._width, window.innerHeight / Gdx_8.default._height);
                break;
            case Scaling_3.default.fillX:
                Gdx_8.default._scaleX = window.innerWidth / Gdx_8.default._width;
                Gdx_8.default._scaleY = Gdx_8.default._scaleX;
                break;
            case Scaling_3.default.fillY:
                Gdx_8.default._scaleY = window.innerHeight / Gdx_8.default._height;
                Gdx_8.default._scaleX = Gdx_8.default._scaleY;
                break;
            case Scaling_3.default.stretch:
                Gdx_8.default._scaleX = window.innerWidth / Gdx_8.default._width;
                Gdx_8.default._scaleY = window.innerHeight / Gdx_8.default._height;
                break;
            case Scaling_3.default.stretchX:
                Gdx_8.default._scaleX = window.innerWidth / Gdx_8.default._width;
                Gdx_8.default._scaleY = Gdx_8.default._scaleX;
                break;
            case Scaling_3.default.stretchY:
                Gdx_8.default._scaleY = window.innerHeight / Gdx_8.default._height;
                Gdx_8.default._scaleX = Gdx_8.default._scaleY;
        }
        Gdx_8.default._stage.scale.x = Gdx_8.default._scaleX;
        Gdx_8.default._stage.scale.y = Gdx_8.default._scaleY;
        return Gdx_8.default._renderer.resize(Math.ceil(Gdx_8.default._width * Gdx_8.default._scaleX), Math.ceil(Gdx_8.default._height * Gdx_8.default._scaleY));
    };
    /*
     * getJSON
     *
     * Load a json resource
     *
     * @see https://mathiasbynens.be/notes/xhr-responsetype-json
     * @param url
     * @returns Promise
     */
    getJSON = function (url) {
        return new Promise((function (_this) {
            return function (resolve, reject) {
                var xhr;
                xhr = new XMLHttpRequest();
                xhr.open('get', url, true);
                xhr.responseType = 'json';
                xhr.onload = function () {
                    if (xhr.status === 200) {
                        return resolve(xhr.response);
                    }
                    else {
                        return reject(xhr.status);
                    }
                };
                return xhr.send();
            };
        })(this));
    };
    /*
     * @JSName("gdx.JsApplication")
     */
    JsApplication = (function () {
        function JsApplication(listener, config) {
            var _this;
            if (config.title === null) {
                config.title = listener.constructor.name;
            }
            document.title = config.title;
            this.config = config;
            this.graphics = new Graphics_1.default(config);
            this.audio = new Audio_1.default();
            this.files = new Files_1.default();
            this.input = new Input_1.default();
            this.gl = null;
            this.listener = listener;
            Gdx_8.default.app = this;
            Gdx_8.default.graphics = this.graphics;
            Gdx_8.default.audio = this.audio;
            Gdx_8.default.files = this.files;
            Gdx_8.default.input = this.input;
            _this = this;
            /*
             * Load the manifest, and initialize
             */
            getJSON('manifest.json').then(function (data) {
                var name, ref, url;
                ref = data.atlas;
                for (name in ref) {
                    url = ref[name];
                    pixi.loader.add(name, url);
                }
                return pixi.loader.load(function (loader, res) {
                    var i, len, path, ref1;
                    Gdx_8.default._resources = Object.create(res);
                    ref1 = data.files;
                    for (i = 0, len = ref1.length; i < len; i++) {
                        path = ref1[i];
                        pixi.loader.add(path);
                    }
                    pixi.loader.load(function (loader, res) {
                        return console.log(res);
                    });
                    _this.initialize();
                });
            }, function (status) {
                return console.log("error " + status + ": Unable to load manifest.json");
            });
        }
        /*
         * Start the main loop
         */
        JsApplication.prototype.initialize = function () {
            var mainLoop;
            Gdx_8.default._width = this.config.width;
            Gdx_8.default._height = this.config.height;
            Gdx_8.default._renderer = pixi.autoDetectRenderer(this.config.width, this.config.height, {
                antialiasing: false,
                transparent: false,
                resolution: window.devicePixelRatio,
                autoResize: true
            });
            Gdx_8.default._renderer.view.style.position = "absolute";
            Gdx_8.default._renderer.view.style.top = "0px";
            Gdx_8.default._renderer.view.style.left = "0px";
            Gdx_8.default._stage = new pixi.Container();
            resize();
            document.body.appendChild(Gdx_8.default._renderer.view);
            window.addEventListener("resize", resize);
            this.graphics.setupDisplay();
            this.listener.create();
            mainLoop = (function (_this) {
                return function (time) {
                    _this.graphics.update(time);
                    _this.graphics.frameId++;
                    _this.listener.render();
                    return window.requestAnimationFrame(mainLoop);
                };
            })(this);
            return window.requestAnimationFrame(mainLoop);
        };
        return JsApplication;
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = JsApplication;
});
// Generated by CoffeeScript 1.10.0
define("gdx/JsApplicationConfiguration", ["require", "exports"], function (require, exports) {
    "use strict";
    /*
     * @JSName("gdx.JsApplicationConfiguration")
     */
    var JsApplicationConfiguration;
    JsApplicationConfiguration = (function () {
        function JsApplicationConfiguration() {
            this.height = 480;
            this.width = 640;
            this.fullscreen = false;
            this.title = null;
        }
        return JsApplicationConfiguration;
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = JsApplicationConfiguration;
});
define("gdx", ["require", "exports", "gdx/audio/Sound", "gdx/files/FileHandle", "gdx/graphics/g2d/Batch", "gdx/graphics/g2d/BitmapFont", "gdx/graphics/g2d/Sprite", "gdx/graphics/g2d/SpriteBatch", "gdx/graphics/g2d/TextureAtlas", "gdx/graphics/g2d/TextureRegion", "gdx/graphics/Camera", "gdx/graphics/GL20", "gdx/graphics/OrthographicCamera", "gdx/graphics/Texture", "gdx/math/Vector3", "gdx/scenes/scene2d/utils/ClickListener", "gdx/scenes/scene2d/Actor", "gdx/scenes/scene2d/Event", "gdx/scenes/scene2d/EventListener", "gdx/scenes/scene2d/InputEvent", "gdx/scenes/scene2d/InputListener", "gdx/utils/viewport/FillViewport", "gdx/utils/viewport/FitViewport", "gdx/utils/viewport/ScalingViewport", "gdx/utils/viewport/Viewport", "gdx/Audio", "gdx/Files", "gdx/Gdx", "gdx/Graphics", "gdx/Input", "gdx/JsApplication", "gdx/JsApplicationConfiguration"], function (require, exports, Sound_2, FileHandle_2, Batch_2, BitmapFont_1, Sprite_1, SpriteBatch_1, TextureAtlas_1, TextureRegion_2, Camera_2, GL20_3, OrthographicCamera_2, Texture_1, Vector3_2, ClickListener_1, Actor_1, Event_1, EventListener_2, InputEvent_1, InputListener_1, FillViewport_1, FitViewport_1, ScalingViewport_3, Viewport_2, Audio_2, Files_2, Gdx_9, Graphics_2, Input_2, JsApplication_1, JsApplicationConfiguration_1) {
    "use strict";
    /*
     * Export the global gdx namespace
     */
    var libGDX;
    libGDX = {
        audio: {
            Sound: Sound_2.default
        },
        files: {
            FileHandle: FileHandle_2.default
        },
        graphics: {
            g2d: {
                Batch: Batch_2.default,
                BitmapFont: BitmapFont_1.default,
                Sprite: Sprite_1.default,
                SpriteBatch: SpriteBatch_1.default,
                TextureAtlas: TextureAtlas_1.default,
                TextureRegion: TextureRegion_2.default
            },
            Camera: Camera_2.default,
            GL20: GL20_3.default,
            OrthographicCamera: OrthographicCamera_2.default,
            Texture: Texture_1.default
        },
        math: {
            MathUtils: Math,
            Vector3: Vector3_2.default
        },
        scenes: {
            scene2d: {
                utils: {
                    ClickListener: ClickListener_1.default
                },
                Actor: Actor_1.default,
                Event: Event_1.default,
                EventListener: EventListener_2.default,
                InputEvent: InputEvent_1.default,
                InputListener: InputListener_1.default
            }
        },
        utils: {
            viewport: {
                FillViewport: FillViewport_1.default,
                FitViewport: FitViewport_1.default,
                ScalingViewport: ScalingViewport_3.default,
                Viewport: Viewport_2.default
            },
            Scaling: ScalingViewport_3.default
        },
        Audio: Audio_2.default,
        Files: Files_2.default,
        Gdx: Gdx_9.default,
        Graphics: Graphics_2.default,
        Input: Input_2.default,
        JsApplication: JsApplication_1.default,
        JsApplicationConfiguration: JsApplicationConfiguration_1.default
    };
    window['gdx'] = libGDX;
    if (typeof define !== "undefined" && define !== null) {
        define.global('gdx', libGDX);
    }
    if (typeof define !== "undefined" && define !== null) {
        define.register('gdx', libGDX);
    }
});
