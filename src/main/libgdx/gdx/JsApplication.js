// Generated by CoffeeScript 1.10.0
import Graphics from 'gdx/Graphics';
import Audio from 'gdx/Audio';
import Files from 'gdx/Files';
import Input from 'gdx/Input';
import Gdx from 'gdx/Gdx';
import Scaling from 'gdx/utils/Scaling';
var JsApplication, getJSON, resize;

resize = function() {
  switch (Gdx._scaling) {
    case Scaling.fit:
      Gdx._scaleX = Gdx._scaleY = Math.max(window.innerWidth / Gdx._width, window.innerHeight / Gdx._height);
      break;
    case Scaling.fill:
      Gdx._scaleX = Gdx._scaleY = Math.min(window.innerWidth / Gdx._width, window.innerHeight / Gdx._height);
      break;
    case Scaling.fillX:
      Gdx._scaleX = window.innerWidth / Gdx._width;
      Gdx._scaleY = Gdx._scaleX;
      break;
    case Scaling.fillY:
      Gdx._scaleY = window.innerHeight / Gdx._height;
      Gdx._scaleX = Gdx._scaleY;
      break;
    case Scaling.stretch:
      Gdx._scaleX = window.innerWidth / Gdx._width;
      Gdx._scaleY = window.innerHeight / Gdx._height;
      break;
    case Scaling.stretchX:
      Gdx._scaleX = window.innerWidth / Gdx._width;
      Gdx._scaleY = Gdx._scaleX;
      break;
    case Scaling.stretchY:
      Gdx._scaleY = window.innerHeight / Gdx._height;
      Gdx._scaleX = Gdx._scaleY;
  }
  Gdx._stage.scale.x = Gdx._scaleX;
  Gdx._stage.scale.y = Gdx._scaleY;
  return Gdx._renderer.resize(Math.ceil(Gdx._width * Gdx._scaleX), Math.ceil(Gdx._height * Gdx._scaleY));
};


/*
 * getJSON
 * 
 * Load a json resource
 *
 * @see https://mathiasbynens.be/notes/xhr-responsetype-json
 * @param url
 * @returns Promise
 */

getJSON = function(url) {
  return new Promise((function(_this) {
    return function(resolve, reject) {
      var xhr;
      xhr = new XMLHttpRequest();
      xhr.open('get', url, true);
      xhr.responseType = 'json';
      xhr.onload = function() {
        if (xhr.status === 200) {
          return resolve(xhr.response);
        } else {
          return reject(xhr.status);
        }
      };
      return xhr.send();
    };
  })(this));
};


/*
 * @JSName("gdx.JsApplication")
 */

JsApplication = (function() {
  function JsApplication(listener, config) {
    var _this;
    if (config.title === null) {
      config.title = listener.constructor.name;
    }
    document.title = config.title;
    this.config = config;
    this.graphics = new Graphics(config);
    this.audio = new Audio();
    this.files = new Files();
    this.input = new Input();
    this.gl = null;
    this.listener = listener;
    Gdx.app = this;
    Gdx.graphics = this.graphics;
    Gdx.audio = this.audio;
    Gdx.files = this.files;
    Gdx.input = this.input;
    _this = this;

    /*
     * Load the manifest, and initialize
     */
    getJSON('manifest.json').then(function(data) {
      var name, ref, url;
      ref = data.atlas;
      for (name in ref) {
        url = ref[name];
        PIXI.loader.add(name, url);
      }
      return PIXI.loader.load(function(loader, res) {
        var i, len, path, ref1;
        Gdx._resources = Object.create(res);
        ref1 = data.files;
        for (i = 0, len = ref1.length; i < len; i++) {
          path = ref1[i];
          PIXI.loader.add(path);
        }
        PIXI.loader.load(function(loader, res) {
          return console.log(res);
        });
        _this.initialize();
      });
    }, function(status) {
      return console.log("error " + status + ": Unable to load manifest.json");
    });
  }


  /*
   * Start the main loop
   */

  JsApplication.prototype.initialize = function() {
    var mainLoop;
    Gdx._width = this.config.width;
    Gdx._height = this.config.height;
    Gdx._renderer = PIXI.autoDetectRenderer(this.config.width, this.config.height, {
      antialiasing: false,
      transparent: false,
      resolution: window.devicePixelRatio,
      autoResize: true
    });
    Gdx._renderer.view.style.position = "absolute";
    Gdx._renderer.view.style.top = "0px";
    Gdx._renderer.view.style.left = "0px";
    Gdx._stage = new PIXI.Container();
    resize();
    document.body.appendChild(Gdx._renderer.view);
    window.addEventListener("resize", resize);
    this.graphics.setupDisplay();
    this.listener.create();
    mainLoop = (function(_this) {
      return function(time) {
        _this.graphics.update(time);
        _this.graphics.frameId++;
        _this.listener.render();
        return window.requestAnimationFrame(mainLoop);
      };
    })(this);
    return window.requestAnimationFrame(mainLoop);
  };

  return JsApplication;

})();

export default JsApplication;
